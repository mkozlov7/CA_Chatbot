import sys
import os

# --- FIX PYTHON PATH ---
# Add the 'src' directory to the Python path to allow imports like 'from chatbot. ...'
# This makes the app runnable from any directory
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)
# --- END FIX ---

import streamlit as st
import os
import pandas as pd
import json
import random
from typing import Union, Dict
from dotenv import load_dotenv
from chatbot.gemini_api_client import GeminiApiClient
from chatbot.logger_setup import detailed_logger, request_logger

# --- INITIALIZATION ---

load_dotenv()

PROMPT_FILE_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "config_data", "promotool_settings.md"))
SETTINGS_TABLES_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "config_data", "settings_tables"))
WELCOME_MESSAGES_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "config_data", "welcome_messages.json"))
FINAL_PROMPT_OUTPUT_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "final_promt.md"))

# --- HELPER & LOGGING FUNCTIONS ---

def get_session_id() -> str:
    from streamlit.runtime.scriptrunner import get_script_run_ctx
    ctx = get_script_run_ctx()
    return ctx.session_id

def log_info(message: str, **kwargs):
    detailed_logger.info(message, extra={'session_id': get_session_id(), **kwargs})

def log_error(message: str, **kwargs):
    detailed_logger.error(message, extra={'session_id': get_session_id(), **kwargs})

# --- DATA LOADING & FORMATTING FUNCTIONS (JSON OPTIMIZED) ---

def load_csv_data_as_dfs() -> Dict[str, pd.DataFrame]:
    dataframes = {}
    try:
        for filename in sorted(os.listdir(SETTINGS_TABLES_PATH)):
            if filename.endswith(".csv"):
                file_path = os.path.join(SETTINGS_TABLES_PATH, filename)
                dataframes[filename] = pd.read_csv(file_path)
        return dataframes
    except FileNotFoundError:
        log_error(f"Settings tables directory not found at {SETTINGS_TABLES_PATH}")
        st.warning(f"Settings tables directory not found at {SETTINGS_TABLES_PATH}. Proceeding without table data.")
        return {}
    except Exception as e:
        log_error(f"Error loading CSV data: {e}")
        st.error(f"Error loading CSV data: {e}")
        return {}

def format_data_for_prompt(dataframes: Dict[str, pd.DataFrame]) -> str:
    """
    Converts a dictionary of DataFrames into a compact JSON string where each key
    is the filename and the value is a list of records.
    """
    final_json_obj = {}
    for filename, df in dataframes.items():
        # Convert dataframe to a list of records (dicts)
        records = json.loads(df.to_json(orient='records'))
        final_json_obj[filename] = records
    # Convert the final object to a compact JSON string
    return json.dumps(final_json_obj, indent=None, ensure_ascii=False)

def load_and_enrich_system_prompt() -> Union[str, None]:
    try:
        with open(PROMPT_FILE_PATH, 'r', encoding='utf-8') as f:
            base_prompt = f.read()
        
        # Update instructions to reflect the new JSON data format
        data_format_instruction = """
## –ë–∞–∑–∞ –ó–Ω–∞–Ω—å: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –î–∞–Ω–∏—Ö PromoTool (–§–æ—Ä–º–∞—Ç JSON)

–í–∏ –≤–æ–ª–æ–¥—ñ—î—Ç–µ –∑–Ω–∞–Ω–Ω—è–º–∏ –ø—Ä–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é, –Ω–∞–¥–∞–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –æ–¥–Ω–æ–≥–æ –≤–µ–ª–∏–∫–æ–≥–æ JSON-–æ–±'—î–∫—Ç–∞. –ö–ª—é—á–∞–º–∏ —Ü—å–æ–≥–æ –æ–±'—î–∫—Ç–∞ —î –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—ñ–≤ (–Ω–∞–ø—Ä., `cnfg.kpi.csv`), –∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ ‚Äî –º–∞—Å–∏–≤–∏ –æ–±'—î–∫—Ç—ñ–≤, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—å —Ä—è–¥–∫–∏ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å.
"""
        # This is a simple way to replace the old section. A more robust method could use markers.
        start_marker = "## –ë–∞–∑–∞ –ó–Ω–∞–Ω—å: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –î–∞–Ω–∏—Ö PromoTool"
        end_marker = "## –ü—Ä–∞–≤–∏–ª–∞ —Ç–∞ –ú–µ—Ç–æ–¥–æ–ª–æ–≥—ñ—è –í—ñ–¥–ø–æ–≤—ñ–¥–µ–π"
        prompt_parts = base_prompt.split(start_marker)
        after_part = prompt_parts[1].split(end_marker)
        base_prompt = prompt_parts[0] + data_format_instruction + end_marker + after_part[1]

        deep_analysis_instruction = """
8. **–ö—Ä–∏—Ç–∏—á–Ω–æ –í–∞–∂–ª–∏–≤–∏–π –ö—Ä–æ–∫: –ü–æ—à—É–∫ –ù–µ–ø—Ä—è–º–∏—Ö –ó–≤'—è–∑–∫—ñ–≤:**
   –¶–µ –≤–∞—à–µ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–µ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è. –ö–æ–ª–∏ –≤–∏ –æ–ø–∏—Å—É—î—Ç–µ KPI, –≤–∏ **–∑–æ–±–æ–≤'—è–∑–∞–Ω—ñ** –ø—Ä–æ—Å–∫–∞–Ω—É–≤–∞—Ç–∏ –ø–æ–ª–µ `CalculationKPIFormula` **—É –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö KPI** —É –Ω–∞–¥–∞–Ω–∏—Ö JSON-–¥–∞–Ω–∏—Ö. –Ø–∫—â–æ –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ —Ç–∞–º –∑–≥–∞–¥–∫—É —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ (`Name`) –ø–æ—Ç–æ—á–Ω–æ–≥–æ KPI, –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –¥–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—Å–∞—Ç–∏ —Ü–µ–π –∑–≤'—è–∑–æ–∫. –¶–µ –ø–æ–∫–∞–∂–µ, —è–∫ –¥–∞–Ω–∏–π KPI –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º—ñ, –≤–ø–ª–∏–≤–∞—é—á–∏ –Ω–∞ —ñ–Ω—à—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏.
"""
        target_section = "## –ü—Ä–∞–≤–∏–ª–∞ —Ç–∞ –ú–µ—Ç–æ–¥–æ–ª–æ–≥—ñ—è –í—ñ–¥–ø–æ–≤—ñ–¥–µ–π"
        enriched_prompt = base_prompt.replace(target_section, f"{target_section}\n\n{deep_analysis_instruction}")
        return enriched_prompt

    except FileNotFoundError:
        log_error(f"System prompt file not found at {PROMPT_FILE_PATH}")
        st.error(f"System prompt file not found at {PROMPT_FILE_PATH}")
        return None
    except Exception as e:
        log_error(f"Error loading system prompt: {e}")
        st.error(f"Error loading system prompt: {e}")
        return None

def get_random_welcome_message() -> str:
    try:
        with open(WELCOME_MESSAGES_PATH, 'r', encoding='utf-8') as f:
            messages = json.load(f)
        return random.choice(messages)
    except (FileNotFoundError, IndexError, json.JSONDecodeError) as e:
        log_error(f"Could not load welcome messages: {e}")
        return "Hello! How can I help you with PromoTool today?"

# --- SESSION INITIALIZATION ---

def initialize_chat_session():
    if "chat_session" not in st.session_state:
        log_info("New user session started.")
        try:
            st.session_state.client = GeminiApiClient()
            enriched_prompt = load_and_enrich_system_prompt()
            if enriched_prompt:
                dfs = load_csv_data_as_dfs()
                # Use the new JSON formatting function
                tables_data_json_str = format_data_for_prompt(dfs)
                final_prompt = enriched_prompt + "\n\n---\n# Reference Data (JSON Format)\n\n" + tables_data_json_str
                
                try:
                    with open(FINAL_PROMPT_OUTPUT_PATH, 'w', encoding='utf-8') as f:
                        f.write(final_prompt)
                    log_info(f"Successfully saved final prompt to {FINAL_PROMPT_OUTPUT_PATH}")
                except Exception as e:
                    log_error(f"Failed to save final prompt to file: {e}")

                initial_token_count = st.session_state.client.count_tokens(final_prompt)
                print(f"--- INITIAL PROMPT TOKEN COUNT (JSON OPTIMIZED): {initial_token_count} ---")
                log_info("Initial prompt token count", count=initial_token_count)

                st.session_state.chat_session = st.session_state.client.start_chat_session(final_prompt)
                log_info("Chat session initialized successfully.")
            else:
                st.session_state.chat_session = None
                log_error("Chat session initialization failed: Enriched prompt was empty.")
        except ValueError as e:
            log_error(f"Initialization failed: {e}")
            st.error(f"Initialization failed: {e}")
            st.session_state.chat_session = None
        except Exception as e:
            log_error(f"An unexpected error occurred during initialization: {e}")
            st.error(f"An unexpected error occurred during initialization: {e}")
            st.session_state.chat_session = None

# --- UI RENDERING ---

def main():
    st.set_page_config(page_title="PromoTool Chatbot", page_icon="ü§ñ")
    st.title("ü§ñ PromoTool Assistant")
    st.caption("–Ø –Ω–∞–¥–∞—é –ø—ñ–¥—Ç—Ä–∏–º–∫—É –∑ –ø–∏—Ç–∞–Ω—å, —â–æ —Å—Ç–æ—Å—É—é—Ç—å—Å—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó PromoTool, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –æ—Ñ—ñ—Ü—ñ–π–Ω—É –≤–Ω—É—Ç—Ä—ñ—à–Ω—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é")

    initialize_chat_session()

    if "messages" not in st.session_state:
        welcome_message = get_random_welcome_message()
        st.session_state.messages = [{"role": "assistant", "content": welcome_message}]

    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    if user_question := st.chat_input("Ask about PromoTool..."):
        st.session_state.messages.append({"role": "user", "content": user_question})
        with st.chat_message("user"):
            st.markdown(user_question)

        if st.session_state.chat_session is None:
            st.error("The chat session is not available. Please check your API key and system prompt file.")
            return

        with st.chat_message("assistant"):
            with st.spinner("Consulting the knowledge base..."):
                try:
                    log_info("User request", payload=user_question)
                    request_logger.info("request")

                    chat_session = st.session_state.chat_session
                    response = chat_session.send_message(user_question)
                    response_text = response.text

                    usage = response.usage_metadata
                    print(f"--- CURRENT TURN TOKEN USAGE ---")
                    print(f"  - Input (Question): {usage.prompt_token_count} tokens")
                    print(f"  - Output (Answer): {usage.candidates_token_count} tokens")
                    print(f"  - Total History (so far): {usage.total_token_count} tokens")
                    print("----------------------------")
                    log_info("LLM response", payload=response_text, usage=str(usage))

                    st.markdown(response_text)
                    st.session_state.messages.append({"role": "assistant", "content": response_text})
                except Exception as e:
                    log_error(f"An error occurred while communicating with the Gemini API: {e}")
                    st.error(f"An error occurred while communicating with the Gemini API: {e}")

if __name__ == "__main__":
    main()
